{"version":3,"sources":["RegForm/RegForm.js","App.js","serviceWorker.js","index.js"],"names":["givenXhrSchema","require","RegForm","React","useState","givenFormData","formData","setFormData","schema","givenSchema","uiSchema","givenUISchema","xhrSchema","onChange","onSubmit","value","callback","console","log","JSON","stringify","setTimeout","onCancel","onUpload","onError","submitOnEnter","App","expand","light","bgColor","fluid","aria-controls","aria-expanded","aria-label","fas","icon","className","id","right","active","aria-current","href","style","backgroundImage","height","size","variant","small","align","scope","note","noteColor","listUnStyled","border","alignment","maxWidth","backgroundcolor","backgroundColor","Date","getFullYear","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"u5JASMA,EAAiBC,EAAQ,KAGhB,SAASC,EAAT,GAA6B,eACxC,MAAgCC,IAAMC,SAASC,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KAkBA,OACI,cAAC,IAAD,CAEIC,OAAQC,EACRC,SAAUC,EACVC,UAAWZ,GAAkB,GAC7BM,SAAUA,EAGVO,SAjBc,SAAC,GAAD,IAAGP,EAAH,EAAGA,SAAH,OAAkBC,EAAYD,IAkB5CQ,SA1BS,SAACC,EAAOC,GACrBC,QAAQC,IAAI,eAAgBC,KAAKC,UAAUL,IAC3CM,YAAW,kBAAML,GAAYA,MAAY,MA2BrCM,SAzBS,WACbL,QAAQC,IAAI,0BAyBRK,SApBS,SAACR,GACdE,QAAQC,IAAI,aAAcH,IAoBtBS,QAlBO,GAqBPC,eAAa,I,YCsGVC,E,uKA5HX,c,oBAIA,WACI,OAEI,qCACI,mCACI,cAAC,IAAD,CAAWC,OAAO,KAAKC,OAAK,EAACC,QAAQ,QAArC,SACI,eAAC,IAAD,CAAcC,OAAK,EAAnB,UACI,cAAC,IAAD,CACIC,gBAAc,kBACdC,gBAAc,QACdC,aAAW,oBAHf,SAII,cAAC,IAAD,CAASC,KAAG,EAACC,KAAK,WAEtB,qBAAKC,UAAU,2BAA2BC,GAAG,kBAA7C,SAEI,eAAC,IAAD,CAAcC,OAAK,EAACF,UAAU,eAA9B,UAEI,cAAC,IAAD,CAAeG,QAAM,EAArB,SACI,cAAC,IAAD,CAAeC,eAAa,OAAOC,KAAK,IAAxC,mBAIJ,cAAC,IAAD,UACI,cAAC,IAAD,CAAeA,KAAK,IAApB,6BAEJ,cAAC,IAAD,UACI,cAAC,IAAD,CAAeA,KAAK,iCAApB,0BAEJ,cAAC,IAAD,UACI,cAAC,IAAD,CAAeA,KAAK,IAApB,4BAOpB,qBACIL,UAAU,2BACVM,MAAO,CAACC,gBAAiB,kDAAmDC,OAAQ,UAG5F,cAAC,IAAD,UACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,KAAK,MAAMT,UAAU,aAC7B,eAAC,IAAD,CAAQS,KAAK,IAAIT,UAAU,WAA3B,UACI,cAAC,IAAD,CAAeU,QAAQ,KAAvB,kDACA,eAAC,IAAD,CAAUC,OAAK,EAACC,MAAM,SAAtB,UACI,eAAC,IAAD,WACI,oBAAIC,MAAM,MAAV,eACA,oBAAIA,MAAM,MAAV,6CAEA,oBAAIA,MAAM,MAAV,iDAEA,oBAAIA,MAAM,MAAV,iDAEA,oBAAIA,MAAM,MAAV,gDAEA,oBAAIA,MAAM,MAAV,oCAEA,oBAAIA,MAAM,MAAV,mDAGJ,cAAC,IAAD,UACI,+BACI,oBAAIA,MAAM,MAAV,eACA,yDACA,wDACA,uDACA,uDACA,uCACA,+CAIZ,cAAC,IAAD,CAAeC,MAAI,EAACC,UAAU,UAA9B,2RAMA,cAAC,IAAD,CAAeL,QAAQ,KAAvB,6DACA,cAAC,IAAD,CAAeM,cAAY,EAAChB,UAAU,OAAtC,SACI,+BACI,mEACA,gFACA,0FACA,qFACA,mJAEA,mGACA,wFACA,2FACA,mFAIZ,cAAC,IAAD,CAAQS,KAAK,IAAIT,UAAU,WAA3B,SACI,cAAC,IAAD,CAASiB,OAAO,YAAYC,UAAU,SAASZ,MAAO,CAACa,SAAU,SAAjE,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAaD,UAAU,WACrB,cAACpD,EAAD,gBAOlB,cAAC,IAAD,CAAWsD,gBAAgB,QAAQpB,UAAU,2BAA7C,SACI,sBAAKA,UAAU,kBAAkBM,MAAO,CAAEe,gBAAiB,sBAA3D,mBACY,IAAIC,MAAOC,cADvB,cACiD,IAC7C,mBAAGvB,UAAU,YAAYK,KAAK,wBAA9B,sC,GApHNmB,aCbZC,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCR,SAASC,EAAgBC,EAAOC,GAC5BC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YAIxB/D,QAAQC,IACJ,gHAKAmD,GAAUA,EAAOY,UACjBZ,EAAOY,SAASP,KAMpBzD,QAAQC,IAAI,sCAGRmD,GAAUA,EAAOa,WACjBb,EAAOa,UAAUR,WAOxCS,OAAM,SAAAC,GACHnE,QAAQmE,MAAM,4CAA6CA,MCxFvEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDc1C,SAAkBnB,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAImB,IAAIC,QAAwB3B,OAAOC,SAASvB,MACpDkD,SAAW5B,OAAOC,SAAS2B,OAIrC,OAGJ5B,OAAO6B,iBAAiB,QAAQ,WAC5B,IAAMxB,EAAK,UAAMsB,QAAN,sBAEP7B,IAgEhB,SAAiCO,EAAOC,GAEpCwB,MAAMzB,GACDK,MAAK,SAAAqB,GAEF,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEjB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GAC/BA,EAAa2B,aAAa5B,MAAK,WAC3BV,OAAOC,SAASsC,eAKxBnC,EAAgBC,EAAOC,MAG9Bc,OAAM,WACHlE,QAAQC,IACJ,oEArFAqF,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WAC/BxD,QAAQC,IACJ,gHAMRiD,EAAgBC,EAAOC,OCrCvCE,K","file":"static/js/main.bcb46b51.chunk.js","sourcesContent":["// @ts-ignore\nimport React from 'react';\nimport MaterialJsonSchemaForm from 'react-jsonschema-form-material-ui';\n\n// Internals\nimport givenSchema from '../schemas/form.json';\nimport givenUISchema from '../schemas/ui-schema.json';\n\nimport givenFormData from '../schemas/form-data.json';\nconst givenXhrSchema = require('../schemas/hrx-schema.json'); // Optional\ntype Props = {}\n\nexport default function RegForm({}: Props) {\n    const [formData, setFormData] = React.useState(givenFormData);\n\n    const onSubmit = (value, callback) => {\n        console.log('onSubmit: %s', JSON.stringify(value)); // eslint-disable-line no-console\n        setTimeout(() => callback && callback(), 2000); // just an example in real world can be your XHR call\n    }\n    const onCancel = () => {\n        console.log('on reset being called');\n    }\n\n    const onFormChanged = ({ formData }) => setFormData(formData);\n\n    const onUpload = (value) => {\n        console.log('onUpload: ', value); // eslint-disable-line no-console\n    }\n    const onError ={\n      //Todo\n    }\n    return (\n        <MaterialJsonSchemaForm\n            // Define Schema\n            schema={givenSchema}\n            uiSchema={givenUISchema}\n            xhrSchema={givenXhrSchema || {}}\n            formData={formData}\n\n            // Define Event handlers\n            onChange={onFormChanged}\n            onSubmit={onSubmit}\n\n            // Every Prop below is optional - every prop above this line is required\n            onCancel={onCancel} /* optional */\n            onUpload={onUpload} /* optional */\n            onError={onError} /* optional */\n\n            /* Optional Prop to auto submit form on press of enter */\n            submitOnEnter\n        />\n    );\n}\n","//src/App.js\n// <Registrations registrations={this.state.registrations} />\nimport React, {Component} from 'react';\nimport RegForm from './RegForm/RegForm'\n\nimport {\n    MDBCard,\n    MDBCardBody,\n    MDBCardText,\n    MDBCol,\n    MDBContainer,\n    MDBIcon,\n    MDBNavbar,\n    MDBNavbarItem,\n    MDBNavbarLink,\n    MDBNavbarNav,\n    MDBNavbarToggler,\n    MDBRow,\n    MDBTable,\n    MDBTableBody,\n    MDBTableHead,\n    MDBTypography,\n    MDBFooter\n} from 'mdb-react-ui-kit';\n\nclass App extends Component {\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        return (\n\n            <>\n                <header>\n                    <MDBNavbar expand='lg' light bgColor='white'>\n                        <MDBContainer fluid>\n                            <MDBNavbarToggler\n                                aria-controls='navbarExample01'\n                                aria-expanded='false'\n                                aria-label='Toggle navigation'>\n                                <MDBIcon fas icon='bars'/>\n                            </MDBNavbarToggler>\n                            <div className='collapse navbar-collapse' id='navbarExample01'>\n\n                                <MDBNavbarNav right className='mb-2 mb-lg-0'>\n\n                                    <MDBNavbarItem active>\n                                        <MDBNavbarLink aria-current='page' href='#'>\n                                            Hem\n                                        </MDBNavbarLink>\n                                    </MDBNavbarItem>\n                                    <MDBNavbarItem>\n                                        <MDBNavbarLink href='#'>Ungdomsidrott</MDBNavbarLink>\n                                    </MDBNavbarItem>\n                                    <MDBNavbarItem>\n                                        <MDBNavbarLink href='/components/CreateRegistration'>Anmälan</MDBNavbarLink>\n                                    </MDBNavbarItem>\n                                    <MDBNavbarItem>\n                                        <MDBNavbarLink href='#'>Om</MDBNavbarLink>\n                                    </MDBNavbarItem>\n\n                                </MDBNavbarNav>\n                            </div>\n                        </MDBContainer>\n                    </MDBNavbar>\n                    <div\n                        className='p-5 text-center bg-image'\n                        style={{backgroundImage: \"url('https://i.postimg.cc/RVsNK02p/banner.png')\", height: 100}}\n                    />\n                </header>\n                <MDBContainer>\n                <MDBRow>\n                    <MDBCol size='0.1' className='col-text' />\n                    <MDBCol size='8' className='col-text'>\n                        <MDBTypography variant='h5'>Medlems och träningsavgifter 2021</MDBTypography>\n                        <MDBTable small align=\"middle\">\n                            <MDBTableHead>\n                                <th scope='col'>#</th>\n                                <th scope='col'>13-19 år\n                                    (9/11-mannafotboll)</th>\n                                <th scope='col'> 10—12 år\n                                    (7-manna fotboll)</th>\n                                <th scope='col'> 8 — 9 år\n                                    (5-manna fotboll)</th>\n                                <th scope='col'>6 — 7 år\n                                    (3-manna fotboll)</th>\n                                <th scope='col'>4-5 år\n                                    (Boll o Lek)</th>\n                                <th scope='col'>Funktionsvariationer\n                                    (aktiviteter)</th>\n                            </MDBTableHead>\n                            <MDBTableBody>\n                                <tr>\n                                    <th scope='row'>1</th>\n                                    <td>250kr + 1050kr = 1300kr</td>\n                                    <td>250kr + 850kr = 1100kr</td>\n                                    <td>250kr + 700kr = 950kr</td>\n                                    <td>250kr + 400kr = 650kr</td>\n                                    <td>400kr</td>\n                                    <td>400kr</td>\n                                </tr>\n                            </MDBTableBody>\n                        </MDBTable>\n                        <MDBTypography note noteColor='primary'>\n                        Exkl. lottförsäljning.\n                        Börjar man i föreningen innan den 30/6 betalas full medlems- och träningsavgift.\n                        Börjar man efter 30/6 så betalar man full medlemsavgift men halv träningsavgift t.o.m. 30/9.\n                        Efter den 1/10 betalar man bara medlemsavgiften.\n                        </MDBTypography>\n                        <MDBTypography variant='h6'>Vad ingår i medlems och träningsavgiften?</MDBTypography>\n                        <MDBTypography listUnStyled className='mb-0'>\n                            <ul>\n                                <li>Folksams idrottsförsäkring.</li>\n                                <li>Träning 1-3 ggr/vecka med utbildade ledare.</li>\n                                <li> Seriespel med utbildade domare, för 9-19 åringar.</li>\n                                <li> Cupspel 2-6 ggr per år, för 6-19 åringar.</li>\n                                <li>Träningsset (tröja, shorts, strumpor) ingår i full medlems- och träningsavgift för 6-16\n                                    åringar</li>\n                                <li>Tröja/shorts storlekar: 110/120, 130/140, 150/160, S, M, L, XL</li>\n                                <li> Strumpor storlekar: 31-33, 34-36, 37-39, 40-42, 43-45</li>\n                                <li>Verksamhetsanpassad utrustning för sin åldersgrupp.</li>\n                                <li>Säsongsavslutning med priser/medaljer.</li>\n                        </ul>\n                        </MDBTypography>\n                    </MDBCol>\n                    <MDBCol size='4' className='col-form'>\n                        <MDBCard border=\"secondary\" alignment='center' style={{maxWidth: '22rem'}}>\n                            <MDBCardBody>\n                                <MDBCardText alignment='center' />\n                                  <RegForm />\n                            </MDBCardBody>\n                        </MDBCard>\n                    </MDBCol>\n                </MDBRow>\n\n                    </MDBContainer>\n                <MDBFooter backgroundcolor='light' className='text-center text-lg-left'>\n                    <div className='text-center p-3' style={{ backgroundColor: 'rgba(0, 0, 0, 0.2)' }}>\n                        &copy; {new Date().getFullYear()} Copyright:{' '}\n                        <a className='text-dark' href='https://mickenet.com/'>\n                            mickenet.com\n                        </a>\n                    </div>\n                </MDBFooter>\n            </>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA§§a\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'mdb-react-ui-kit/dist/css/mdb.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}